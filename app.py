import streamlit as st
import tempfile
import cv2
import numpy as np
import mediapipe as mp
from PIL import ImageFont, ImageDraw, Image
import joblib
import time # <-- –ò–º–ø–æ—Ä—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏

# --- 1. –ó–ê–ì–†–£–ó–ö–ê –†–ï–°–£–†–°–û–í ---

# --- –ü–£–¢–¨ –ö –®–†–ò–§–¢–£ ---
FONT_PATH = 'VERDANA.TTF'
try:
    font_trick = ImageFont.truetype(FONT_PATH, 36)
    font_score = ImageFont.truetype(FONT_PATH, 30)
except IOError:
    st.error(f"–û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —à—Ä–∏—Ñ—Ç '{FONT_PATH}'. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª —à—Ä–∏—Ñ—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ GitHub.")
    st.stop()


# --- –ó–ê–ì–†–£–ó–ö–ê "–ú–û–ó–ì–ê" (–ò–ò-–ú–û–î–ï–õ–ò) ---
try:
    model = joblib.load('gymnastics_model.pkl')
except FileNotFoundError:
    st.error("–û–®–ò–ë–ö–ê: –§–∞–π–ª 'gymnastics_model.pkl' –Ω–µ –Ω–∞–π–¥–µ–Ω! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∑–∞–≥—Ä—É–∑–∏–ª–∏ –µ–≥–æ –Ω–∞ GitHub.")
    st.stop()

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MediaPipe ---
mp_pose = mp.solutions.pose

def format_time_manual(timestamp):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç Unix timestamp (float) –≤ —Å—Ç—Ä–æ–∫—É '–ß–ß:–ú–ú:–°–°'"""
    return time.strftime('%H:%M:%S', time.localtime(timestamp))

def format_time(milliseconds):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã –≤–∏–¥–µ–æ (float) –≤ —Å—Ç—Ä–æ–∫—É '–ú–ú:–°–°'"""
    if milliseconds < 0: milliseconds = 0 # –ó–∞—â–∏—Ç–∞ –æ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    total_seconds = int(milliseconds / 1000)
    minutes = total_seconds // 60
    seconds = total_seconds % 60
    return f"{minutes:02d}:{seconds:02d}"

# --- 2. –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û (–ò–ò) –ê–ù–ê–õ–ò–ó–ê ---
# (–ö–æ–¥ –ø–æ—á—Ç–∏ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, —Ç–æ–ª—å–∫–æ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω)
def process_video_ai(video_bytes):
    # --- "–ü–µ—Ä–∏–æ–¥ –û—Ö–ª–∞–∂–¥–µ–Ω–∏—è" ---
    COOLDOWN_FRAMES = 30
    frames_since_last_score = COOLDOWN_FRAMES

    # --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
    total_score = 0
    protocol_entries = []

    SCORES = {"arabesque": 8, "leg_lift": 5, "split": 10, "other": 0}
    POSE_NAMES_RU = {"arabesque": "–õ–ê–°–¢–û–ß–ö–ê", "leg_lift": "–ü–û–î–™–ï–ú –ù–û–ì–ò", "split": "–®–ü–ê–ì–ê–¢", "other": ""}

    # --- –ß–∏—Ç–∞–µ–º –≤–∏–¥–µ–æ –∏–∑ –±–∞–π—Ç–æ–≤ ---
    tfile = tempfile.NamedTemporaryFile(delete=False, suffix='.mp4')
    tfile.write(video_bytes)
    video_path = tfile.name

    cap = cv2.VideoCapture(video_path)

    # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    total_frames = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))
    current_frame = 0
    progress_text = st.empty()
    progress_bar = st.progress(0)

    st_frame = st.empty()

    with mp_pose.Pose(min_detection_confidence=0.5, min_tracking_confidence=0.5) as pose:
        while cap.isOpened():
            ret, frame = cap.read()
            if not ret:
                break

            frames_since_last_score += 1
            current_frame += 1
            if total_frames > 0:
                progress_percent = int((current_frame / total_frames) * 100)
            else:
                progress_percent = 0
            progress_text.text(f"–ò–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ò–ò... –ö–∞–¥—Ä {current_frame}/{total_frames} ({progress_percent}%)")
            progress_bar.progress(progress_percent)

            current_time_msec = cap.get(cv2.CAP_PROP_POS_MSEC)
            current_time_str = format_time(current_time_msec)

            image = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            image.flags.writeable = False
            results = pose.process(image)
            image.flags.writeable = True
            image = cv2.cvtColor(image, cv2.COLOR_RGB2BGR)

            trick_text = ""
            current_pose = "other"

            try:
                landmarks = results.pose_landmarks.landmark
                pose_landmarks_list = []
                for landmark in landmarks:
                    pose_landmarks_list.extend([landmark.x, landmark.y, landmark.z])

                prediction = model.predict([pose_landmarks_list])
                current_pose = prediction[0]

                if current_pose != "other":
                    if frames_since_last_score > COOLDOWN_FRAMES:
                        score = SCORES[current_pose]
                        label = POSE_NAMES_RU[current_pose]
                        total_score += score
                        trick_text = f"{label}! +{score} –ë–ê–õ–õ–û–í"
                        protocol_entries.append(f"{current_time_str} - {label} (+{score}–±)")
                        frames_since_last_score = 0

            except Exception as e:
                pass

            # --- –û—Ç—Ä–∏—Å–æ–≤–∫–∞ ---
            mp.solutions.drawing_utils.draw_landmarks(image, results.pose_landmarks, mp_pose.POSE_CONNECTIONS)
            pil_image = Image.fromarray(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
            draw = ImageDraw.Draw(pil_image)

            if trick_text:
                draw.text((50, 50), trick_text, font=font_trick, fill=(0, 255, 0))
            draw.text((50, 100), f"–í–†–ï–ú–Ø: {current_time_str} | –ò–¢–û–ì–û –ë–ê–õ–õ–û–í: {total_score}", font=font_score, fill=(255, 255, 0))

            image = cv2.cvtColor(np.array(pil_image), cv2.COLOR_RGB2BGR)
            st_frame.image(image, channels="BGR", use_container_width=True)

        cap.release()

        # –û—á–∏—â–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
        progress_text.empty()
        progress_bar.empty()

        # --- –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç ---
        st.success(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ò–ò –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ò—Ç–æ–≥–æ–≤—ã–π —Å—á–µ—Ç: {total_score} –±–∞–ª–ª–æ–≤.")
        st.balloons()
        return total_score, protocol_entries # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç

# --- 3. –ò–ù–¢–ï–†–§–ï–ô–° STREAMLIT ---
st.set_page_config(layout="wide")
st.title("ü§ñ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –≥–∏–º–Ω–∞—Å—Ç–∏–∫–∏")

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session_state –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ ---
if 'manual_score' not in st.session_state:
    st.session_state.manual_score = 0
if 'manual_protocol' not in st.session_state:
    st.session_state.manual_protocol = []

# --- –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å: –í–´–ë–û–† –†–ï–ñ–ò–ú–ê ---
st.sidebar.title("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
analysis_mode = st.sidebar.radio(
    "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –æ—Ü–µ–Ω–∫–∏:",
    ('–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π (–ò–ò)', '–†—É—á–Ω–æ–π')
)

st.write("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∏–¥–µ–æ —Å –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ–º.")
uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥–µ–æ-—Ñ–∞–π–ª", type=["mp4", "mov", "avi"])

if uploaded_file is not None:
    video_bytes = uploaded_file.read() # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –æ–¥–∏–Ω —Ä–∞–∑

    # --- –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤–∏–¥–µ–æ –ü–ï–†–ï–î –∫–Ω–æ–ø–∫–∞–º–∏ ---
    st.video(video_bytes)

    # --- –õ–æ–≥–∏–∫–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤ ---
    if analysis_mode == '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π (–ò–ò)':
        st.subheader("–†–µ–∂–∏–º: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π (–ò–ò)")
        if st.button("–ù–∞—á–∞—Ç—å –ò–ò-–∞–Ω–∞–ª–∏–∑"):
            st.info("–ò–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ò–ò... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.")
            ai_total_score, ai_protocol_entries = process_video_ai(video_bytes)

            # --- –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ò–ò-—Ä–µ–∑—É–ª—å—Ç–∞—Ç ---
            st.subheader("üìù –î–µ—Ç–∞–ª—å–Ω—ã–π –ü—Ä–æ—Ç–æ–∫–æ–ª (–ò–ò)")
            if not ai_protocol_entries:
                st.warning("–ò–ò –Ω–µ –∑–∞—Å—á–∏—Ç–∞–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç—Ä—é–∫–∞.")
            else:
                for entry in ai_protocol_entries:
                    st.write(entry)

            # --- –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ò–ò-–æ—Ç—á–µ—Ç–∞ ---
            report_text = f"–§–ò–ù–ê–õ–¨–ù–´–ô –ü–†–û–¢–û–ö–û–õ –ê–ù–ê–õ–ò–ó–ê (–ò–ò)\n–ò—Ç–æ–≥–æ–≤—ã–π —Å—á–µ—Ç: {ai_total_score} –±–∞–ª–ª–æ–≤\n\n--- –î–µ—Ç–∞–ª—å–Ω—ã–π –õ–æ–≥ –¢—Ä—é–∫–æ–≤ ---\n"
            report_text += "\n".join(ai_protocol_entries) if ai_protocol_entries else "–ù–∏ –æ–¥–Ω–æ–≥–æ —Ç—Ä—é–∫–∞ –Ω–µ –∑–∞—Å—á–∏—Ç–∞–Ω–æ."
            st.download_button(
                label="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –ø—Ä–æ—Ç–æ–∫–æ–ª –ò–ò (.txt)",
                data=report_text,
                file_name="gymnastics_report_AI.txt",
                mime="text/plain"
            )

    elif analysis_mode == '–†—É—á–Ω–æ–π':
        st.subheader("–†–µ–∂–∏–º: –†—É—á–Ω–æ–π")
        st.write("–°–º–æ—Ç—Ä–∏—Ç–µ –≤–∏–¥–µ–æ, —Å—Ç–∞–≤—å—Ç–µ –Ω–∞ –ø–∞—É–∑—É –∏ –Ω–∞–∂–∏–º–∞–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤.")

        # --- –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ ---
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            if st.button("ü§∏‚Äç‚ôÄÔ∏è –®–ø–∞–≥–∞—Ç (+10)"):
                st.session_state.manual_score += 10
                st.session_state.manual_protocol.append(f"{format_time_manual(time.time())} - –®–ü–ê–ì–ê–¢ (+10–±)")
        with col2:
            if st.button("üïäÔ∏è –õ–∞—Å—Ç–æ—á–∫–∞ (+8)"):
                st.session_state.manual_score += 8
                st.session_state.manual_protocol.append(f"{format_time_manual(time.time())} - –õ–ê–°–¢–û–ß–ö–ê (+8–±)")
        with col3:
            if st.button("ü¶µ –ü–æ–¥—ä–µ–º –Ω–æ–≥–∏ (+5)"):
                st.session_state.manual_score += 5
                st.session_state.manual_protocol.append(f"{format_time_manual(time.time())} - –ü–û–î–™–ï–ú –ù–û–ì–ò (+5–±)")
        with col4:
            if st.button("üíç –ö–æ–ª–µ—á–∫–æ (+15)"):
                st.session_state.manual_score += 15
                st.session_state.manual_protocol.append(f"{format_time_manual(time.time())} - –ö–û–õ–ï–ß–ö–û (+15–±)")

        # --- –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä—É—á–Ω–æ–π —Å—á–µ—Ç –∏ –ø—Ä–æ—Ç–æ–∫–æ–ª ---
        st.metric("–¢–µ–∫—É—â–∏–π –†—É—á–Ω–æ–π –°—á–µ—Ç:", st.session_state.manual_score)

        st.subheader("üìù –ü—Ä–æ—Ç–æ–∫–æ–ª –†—É—á–Ω–æ–π –û—Ü–µ–Ω–∫–∏")
        if not st.session_state.manual_protocol:
            st.info("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤—ã—à–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä—é–∫–∏.")
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–≤–µ—Ä—Ö—É)
            for entry in reversed(st.session_state.manual_protocol):
                st.write(entry)

        # --- –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ ---
        if st.button("üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Ä—É—á–Ω–æ–π —Å—á–µ—Ç"):
            st.session_state.manual_score = 0
            st.session_state.manual_protocol = []
            st.rerun() # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É, —á—Ç–æ–±—ã –æ—á–∏—Å—Ç–∏—Ç—å –ø—Ä–æ—Ç–æ–∫–æ–ª

        # --- –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ä—É—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ ---
        if st.session_state.manual_protocol: # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —á—Ç–æ —Å–∫–∞—á–∏–≤–∞—Ç—å
            report_text = f"–ü–†–û–¢–û–ö–û–õ –†–£–ß–ù–û–ô –û–¶–ï–ù–ö–ò\n–ò—Ç–æ–≥–æ–≤—ã–π —Å—á–µ—Ç: {st.session_state.manual_score} –±–∞–ª–ª–æ–≤\n\n--- –î–µ—Ç–∞–ª—å–Ω—ã–π –õ–æ–≥ –¢—Ä—é–∫–æ–≤ ---\n"
            report_text += "\n".join(st.session_state.manual_protocol)
            st.download_button(
                label="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å —Ä—É—á–Ω–æ–π –ø—Ä–æ—Ç–æ–∫–æ–ª (.txt)",
                data=report_text,
                file_name="gymnastics_report_manual.txt",
                mime="text/plain"
            )

# --- –ü–æ–¥—Å–∫–∞–∑–∫–∞ –≤–Ω–∏–∑—É ---
st.markdown("---")
st.caption("–°–æ–∑–¥–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é Streamlit, OpenCV –∏ MediaPipe")
